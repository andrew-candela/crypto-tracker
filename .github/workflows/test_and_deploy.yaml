# Runs the test suite and updates the lambda function code
# Be careful! There are production values hardcoded into this workflow
# like the access keys (secrets from the git repo), the lambda function names
# and the S3 bucket and key

# name: Test and Deploy

# # Run this on every branch cause I'm only developing on master
# on:
#   push:

# jobs:
#   test:
#     name: Run test suite

#     runs-on: ubuntu-latest
#     container: python:3.7-slim-buster

#     env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         PG_DATABASE: crypto
#         PG_USER: postgres
#         PG_PASSWORD: postgres
#         PG_HOST: postgres
#         PG_PORT: 5432

#     services:
#       postgres:
#         # Docker Hub image
#         image: postgres
#         env:
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_USER: postgres
#           POSTGRES_DB: crypto

#         # Set health checks to wait until postgres has started
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#     steps:
#         - name: Git Checkout
#           uses: actions/checkout@v2
#           with:
#             fetch-depth: 1
#         - name: Set up virtual env and run unit tests
#           run: |
#             python3 -m venv venv
#             . venv/bin/activate
#             pip install -r requirements.txt
#             pip install -e .
#             pytest tests/unit
#         - name: Run Integration tests
#           run: | 
#             python3 -m venv venv
#             . venv/bin/activate
#             pip install -r requirements.txt
#             pip install -e .
#             python scripts/run_migrations.py
#             pytest tests/integration

#   deploy:
#     name: Deploy Lambda package
#     needs:
#       - test
#     runs-on: ubuntu-latest
#     container: python:3.7-slim-buster
#     env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#         ZIP_FILE_BUCKET: ${{ secrets.ZIP_FILE_BUCKET }}
#         ZIP_FILE_KEY: lambda_functions_deployment_packages/crypto/function.zip

#     steps:
#       - name: Git Checkout
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: 1
#       - name: Install Packages
#         run: |
#           apt-get update
#           apt-get -y install zip
#           apt-get -y install awscli
#       - name: Deploy Lambda Function Package
#         run: |
#           # bash deploy.sh
#           original_wd=`pwd`
#           python3 -m venv venv
#           . venv/bin/activate
#           pip install -r requirements.txt
#           pip install .
#           deactivate
#           cd venv/lib/python3.7/site-packages
#           zip -r9 -q ${original_wd}/function.zip .
#           cd ${original_wd}

#           aws s3 cp function.zip s3://${ZIP_FILE_BUCKET}/${ZIP_FILE_KEY}
          
#           for function_name in crypto_batch crypto_email crypto_metrics; \
#           do \
#             aws lambda update-function-code \
#               --function-name ${function_name} \
#               --s3-bucket ${ZIP_FILE_BUCKET} \
#               --s3-key ${ZIP_FILE_KEY}; \
#           done
